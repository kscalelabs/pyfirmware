#!/usr/bin/env bash

set -euo pipefail

# Defaults
gstreamer=false
command_source="keyboard"

# Parse args
while [[ $# -gt 0 ]]; do
    case $1 in
        --gstreamer)
            gstreamer=true
            shift
            ;;
        --command-source)
            command_source="$2"
            shift 2
            ;;
        *)
            echo "Unknown option $1" >&2
            echo "Usage: kbot-deploy [--gstreamer] [--command-source keyboard|udp]" >&2
            exit 1
            ;;
    esac
done

# Require klog-deploy
if ! command -v klog-deploy >/dev/null 2>&1; then
    echo "klog-deploy not found, please install klog-robot package" >&2
    exit 1
fi

# Download policies
policy_dir="${HOME}/.policies"
remote_policies="mu:~/kodachrome/policies/"
mkdir -p "$policy_dir"
rsync -aLP --ignore-existing "$remote_policies" "$policy_dir/"

# Select policy
if ! command -v fzf >/dev/null 2>&1; then
    echo "fzf required to select policy. Please install fzf." >&2
    exit 1
fi
policy="$policy_dir/$(find "$policy_dir" -maxdepth 1 -type f -printf "%T@ %f\n" | sort -nr | cut -d' ' -f2- | fzf --prompt 'Policy to deploy: ' --height 20% --reverse)"
if [ -z "${policy:-}" ]; then
    echo "No policy selected." >&2
    exit 1
fi
echo "Deploying policy: $policy"

# Optional gstreamer locally
if [ "$gstreamer" = true ]; then
    echo "Starting GStreamer with --flip"
    sudo -E chrt 80 python -m firmware.gstreamer --flip >/dev/null 2>&1 &
    gstreamer_pid=$!
fi

# Deploy and run repo _run.sh on the robot (torque setup isolated there)
repo_root="$(git rev-parse --show-toplevel 2>/dev/null || echo "")"
run_script=""
if [ -n "$repo_root" ] && [ -f "$repo_root/scripts/_run.sh" ]; then
    run_script="$repo_root/scripts/_run.sh"
elif [ -f "scripts/_run.sh" ]; then
    run_script="scripts/_run.sh"
else
    echo "Could not locate scripts/_run.sh. Run kbot-deploy from a repo checkout." >&2
    if [ "${gstreamer_pid:-}" ]; then kill "$gstreamer_pid" 2>/dev/null || true; fi
    exit 1
fi

klog-deploy --no-wait "$run_script" "$policy" "$command_source"

# Cleanup gstreamer
if [ "${gstreamer_pid:-}" ]; then
    echo "Stopping GStreamer (PID: $gstreamer_pid)"
    kill "$gstreamer_pid" 2>/dev/null || true
fi



